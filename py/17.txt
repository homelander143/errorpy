17A}}

def remove_consecutive_duplicates(s):
    """
    Remove all consecutive duplicates from the given string `s`.
    """
    if not s:
        return s

    result = []
    previous_char = None

    for char in s:
        if char != previous_char:
            result.append(char)
            previous_char = char

    return ''.join(result)

def main():
    # Input string
    s = input("Enter the string: ")

    # Remove consecutive duplicates
    result = remove_consecutive_duplicates(s)

    # Display result
    print("String after removing consecutive duplicates:", result)

if __name__ == "__main__":
    main()

17B}}

def extract_symmetric_tuples(tuple_list):
    """
    Extract symmetric tuples from a list of tuples.
    A tuple (a, b) is symmetric if (b, a) is also in the list.
    """
    # Convert the list of tuples to a set for faster lookups
    tuple_set = set(tuple_list)
    symmetric_tuples = set()

    for tup in tuple_set:
        reversed_tup = (tup[1], tup[0])
        if reversed_tup in tuple_set:
            symmetric_tuples.add(tup)
            symmetric_tuples.add(reversed_tup)

    # Convert the set of symmetric tuples to a list and return
    return list(symmetric_tuples)

def main():
    # Input list of tuples
    input_str = input("Enter the list of tuples (e.g., [(1, 2), (2, 1), (3, 4)]): ")
    # Parse the input string into a list of tuples
    tuple_list = eval(input_str)

    # Extract symmetric tuples
    result = extract_symmetric_tuples(tuple_list)

    # Display result
    print("Symmetric tuples:", result)

if __name__ == "__main__":
    main()

17C}}

def binary_tuple_to_integer(binary_tuple):
    """
    Convert a binary tuple (a tuple of 0s and 1s) to an integer.
    """
    # Ensure that the tuple contains only 0s and 1s
    if not all(bit in (0, 1) for bit in binary_tuple):
        raise ValueError("Tuple contains non-binary elements.")

    # Convert tuple to a binary string
    binary_string = ''.join(map(str, binary_tuple))
    
    # Convert the binary string to an integer
    integer_value = int(binary_string, 2)
    
    return integer_value

def main():
    # Input binary tuple
    input_str = input("Enter the binary tuple (e.g., (1, 0, 1, 1)): ")
    
    # Parse the input string into a tuple of integers
    binary_tuple = eval(input_str)
    
    # Convert the binary tuple to an integer
    try:
        result = binary_tuple_to_integer(binary_tuple)
        print("The integer value of the binary tuple is:", result)
    except ValueError as e:
        print(e)

if __name__ == "__main__":
    main()

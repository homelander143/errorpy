11A}}

def is_palindrome(s):
    """Check if a string is a palindrome."""
    # Remove spaces and convert to lowercase for case-insensitive comparison
    cleaned_string = ''.join(s.split()).lower()
    
    # Check if the cleaned string is equal to its reverse
    return cleaned_string == cleaned_string[::-1]

def main():
    # Read input from the user
    user_input = input("Enter a string: ")
    
    # Check if the string is a palindrome
    if is_palindrome(user_input):
        print("The string is both symmetrical and a palindrome.")
    else:
        print("The string is not a palindrome.")

if __name__ == "__main__":
    main()


11B}}

class Stack:
    def __init__(self):
        """Initialize an empty stack."""
        self.stack = []
    
    def is_empty(self):
        """Check if the stack is empty."""
        return len(self.stack) == 0
    
    def push(self, item):
        """Push an item onto the stack."""
        self.stack.append(item)
        print(f"Item {item} pushed to stack.")
    
    def pop(self):
        """Pop an item from the stack. Return None if the stack is empty."""
        if self.is_empty():
            print("Stack is empty. Cannot pop.")
            return None
        return self.stack.pop()
    
    def peek(self):
        """Return the top item of the stack without removing it. Return None if the stack is empty."""
        if self.is_empty():
            print("Stack is empty. Nothing to peek.")
            return None
        return self.stack[-1]
    
    def display(self):
        """Display the current items in the stack."""
        if self.is_empty():
            print("Stack is empty.")
        else:
            print("Current stack:", self.stack)

def main():
    # Create a stack instance
    stack = Stack()
    
    # Example operations on the stack
    while True:
        print("\nStack Operations:")
        print("1. Push")
        print("2. Pop")
        print("3. Peek")
        print("4. Display")
        print("5. Exit")
        
        choice = input("Enter your choice (1-5): ")
        
        if choice == '1':
            item = int(input("Enter the item to push: "))
            stack.push(item)
        elif choice == '2':
            popped_item = stack.pop()
            if popped_item is not None:
                print(f"Popped item: {popped_item}")
        elif choice == '3':
            top_item = stack.peek()
            if top_item is not None:
                print(f"Top item: {top_item}")
        elif choice == '4':
            stack.display()
        elif choice == '5':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 5.")

if __name__ == "__main__":
    main()




11C}}

def capitalize_first_and_last_characters(sentence):
    """Capitalize the first and last characters of each word in the sentence."""
    # Split the sentence into words
    words = sentence.split()
    
    # Process each word
    new_words = []
    for word in words:
        if len(word) > 1:
            # Capitalize the first and last characters
            new_word = word[0].upper() + word[1:-1] + word[-1].upper()
        else:
            # For single-character words, just capitalize it
            new_word = word.upper()
        new_words.append(new_word)
    
    # Join the words back into a sentence
    return ' '.join(new_words)

def main():
    # Read input from the user
    sentence = input("Enter a sentence: ")
    
    # Capitalize the first and last characters of each word
    result = capitalize_first_and_last_characters(sentence)
    
    # Print the result
    print("Modified sentence:", result)

if __name__ == "__main__":
    main()



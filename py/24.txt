24a}}
import re

def extract_emails(input_file, output_file):
    """
    Extract email addresses from the input file and write them to the output file.
    """
    # Regular expression pattern for matching email addresses
    email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'

    try:
        # Read the content of the input file
        with open(input_file, 'r') as file:
            content = file.read()

        # Find all email addresses using regular expression
        emails = re.findall(email_pattern, content)
        
        if not emails:
            print("No email addresses found.")
            return

        # Write the email addresses to the output file
        with open(output_file, 'w') as file:
            for email in emails:
                file.write(email + '\n')
        
        print(f"Email addresses have been extracted and written to '{output_file}'.")

    except FileNotFoundError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

def main():
    # Input and output file paths
    input_file = 'email.txt'
    output_file = 'mail.txt'
    
    # Extract email addresses and write to the output file
    extract_emails(input_file, output_file)

if __name__ == "__main__":
    main()



24b}}}


import tkinter as tk

class SimpleCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Simple Calculator")
        
        self.create_widgets()

    def create_widgets(self):
        # Entry widget to display calculations
        self.display = tk.Entry(self.root, font=('Arial', 24), borderwidth=2, relief='ridge', justify='right')
        self.display.grid(row=0, column=0, columnspan=4, padx=10, pady=10)
        
        # Button layout
        buttons = [
            '7', '8', '9', '/',
            '4', '5', '6', '*',
            '1', '2', '3', '-',
            'C', '0', '=', '+'
        ]
        
        row_val = 1
        col_val = 0
        for button in buttons:
            tk.Button(self.root, text=button, font=('Arial', 18), command=lambda b=button: self.on_button_click(b)).grid(row=row_val, column=col_val, padx=5, pady=5, sticky="nsew")
            col_val += 1
            if col_val > 3:
                col_val = 0
                row_val += 1
        
        # Configure row and column weights for responsive design
        for i in range(4):
            self.root.grid_rowconfigure(i, weight=1)
            self.root.grid_columnconfigure(i, weight=1)
    
    def on_button_click(self, button):
        if button == 'C':
            self.display.delete(0, tk.END)
        elif button == '=':
            try:
                result = eval(self.display.get())
                self.display.delete(0, tk.END)
                self.display.insert(0, str(result))
            except Exception as e:
                self.display.delete(0, tk.END)
                self.display.insert(0, "Error")
        else:
            current_text = self.display.get()
            new_text = current_text + button
            self.display.delete(0, tk.END)
            self.display.insert(0, new_text)

def main():
    root = tk.Tk()
    calculator = SimpleCalculator(root)
    root.mainloop()

if __name__ == "__main__":
    main()





24c}}


import re

def validate_pan_card(pan_number):
    """
    Validate the Indian PAN Card number using a regular expression.
    
    Parameters:
    pan_number (str): The PAN card number to validate.
    
    Returns:
    bool: True if the PAN card number is valid, False otherwise.
    """
    # Regular expression pattern for a valid PAN card number
    pattern = r'^[A-Z]{5}[0-9]{4}[A-Z]$'
    
    # Use re.match to check if the PAN card number matches the pattern
    if re.match(pattern, pan_number):
        return True
    else:
        return False

def main():
    # Input PAN card number from the user
    pan_number = input("Enter the PAN Card number to validate: ")
    
    # Validate the PAN card number
    if validate_pan_card(pan_number):
        print(f"The PAN Card number '{pan_number}' is valid.")
    else:
        print(f"The PAN Card number '{pan_number}' is invalid.")

if __name__ == "__main__":
    main()


12A}}

def uppercase_half_string(s):
    """Uppercase the first half of the string."""
    # Calculate the midpoint
    midpoint = len(s) // 2
    
    # Uppercase the first half and keep the second half as is
    first_half = s[:midpoint].upper()
    second_half = s[midpoint:]
    
    # Concatenate the uppercased first half with the second half
    return first_half + second_half

def main():
    # Read input from the user
    input_string = input("Enter a string: ")
    
    # Uppercase the first half of the string
    result = uppercase_half_string(input_string)
    
    # Print the result
    print("Modified string:", result)

if __name__ == "__main__":
    main()



12B}}

def read_matrix(rows, cols):
    """Read a matrix of given dimensions from the user."""
    matrix = []
    print(f"Enter the matrix with {rows} rows and {cols} columns:")
    for i in range(rows):
        row = list(map(int, input(f"Enter row {i + 1} (space-separated values): ").split()))
        if len(row) != cols:
            raise ValueError("Number of columns does not match the specified width.")
        matrix.append(row)
    return matrix

def multiply_matrices(A, B):
    """Multiply two matrices A and B."""
    # Number of rows in A and number of columns in B
    rows_A = len(A)
    cols_A = len(A[0])
    rows_B = len(B)
    cols_B = len(B[0])
    
    # Check if multiplication is possible
    if cols_A != rows_B:
        raise ValueError("Number of columns in the first matrix must be equal to the number of rows in the second matrix.")
    
    # Initialize the result matrix with zeros
    result = [[0] * cols_B for _ in range(rows_A)]
    
    # Perform matrix multiplication
    for i in range(rows_A):
        for j in range(cols_B):
            result[i][j] = sum(A[i][k] * B[k][j] for k in range(cols_A))
    
    return result

def print_matrix(matrix):
    """Print a matrix."""
    for row in matrix:
        print(' '.join(map(str, row)))

def main():
    # Read dimensions of the first matrix
    rows_A = int(input("Enter number of rows for the first matrix: "))
    cols_A = int(input("Enter number of columns for the first matrix: "))
    
    # Read the first matrix
    print("First Matrix:")
    A = read_matrix(rows_A, cols_A)
    
    # Read dimensions of the second matrix
    rows_B = int(input("Enter number of rows for the second matrix: "))
    cols_B = int(input("Enter number of columns for the second matrix: "))
    
    # Read the second matrix
    print("Second Matrix:")
    B = read_matrix(rows_B, cols_B)
    
    # Multiply matrices
    try:
        result = multiply_matrices(A, B)
        print("Product Matrix:")
        print_matrix(result)
    except ValueError as e:
        print(e)

if __name__ == "__main__":
    main()


12C}}

def remove_special_characters(s):
    """Remove all special characters from the string and return the alphanumeric string."""
    # Use a list comprehension to filter out non-alphanumeric characters
    alphanumeric_str = ''.join(char for char in s if char.isalnum())
    return alphanumeric_str

def main():
    # Read input from the user
    input_string = input("Enter a string with special characters: ")
    
    # Remove special characters
    result = remove_special_characters(input_string)
    
    # Display the alphanumeric string
    print("Alphanumeric string:", result)

if __name__ == "__main__":
    main()

30a}}

import tkinter as tk
from tkinter import messagebox

class OrderForm:
    def __init__(self, root):
        self.root = root
        self.root.title("Online Order Form")

        # Create and place labels and entry widgets for order details
        tk.Label(root, text="Customer Name:").grid(row=0, column=0, padx=10, pady=10, sticky='e')
        self.name_entry = tk.Entry(root)
        self.name_entry.grid(row=0, column=1, padx=10, pady=10)

        tk.Label(root, text="Contact Email:").grid(row=1, column=0, padx=10, pady=10, sticky='e')
        self.email_entry = tk.Entry(root)
        self.email_entry.grid(row=1, column=1, padx=10, pady=10)

        tk.Label(root, text="Select Item:").grid(row=2, column=0, padx=10, pady=10, sticky='e')
        self.item_var = tk.StringVar()
        self.item_var.set("Select an item")  # default value

        self.item_menu = tk.OptionMenu(root, self.item_var, "Item A - $10", "Item B - $20", "Item C - $30")
        self.item_menu.grid(row=2, column=1, padx=10, pady=10)

        tk.Label(root, text="Quantity:").grid(row=3, column=0, padx=10, pady=10, sticky='e')
        self.quantity_entry = tk.Entry(root)
        self.quantity_entry.grid(row=3, column=1, padx=10, pady=10)

        # Create and place the "Submit" button
        self.submit_button = tk.Button(root, text="Submit Order", command=self.submit_order)
        self.submit_button.grid(row=4, column=0, columnspan=2, pady=20)

    def submit_order(self):
        name = self.name_entry.get()
        email = self.email_entry.get()
        item = self.item_var.get()
        quantity = self.quantity_entry.get()

        # Validate the inputs
        if not name or not email or item == "Select an item" or not quantity:
            messagebox.showerror("Input Error", "Please fill in all fields and select an item.")
            return

        if not quantity.isdigit() or int(quantity) <= 0:
            messagebox.showerror("Quantity Error", "Quantity must be a positive integer.")
            return

        # Calculate the total cost
        item_prices = {"Item A - $10": 10, "Item B - $20": 20, "Item C - $30": 30}
        item_price = item_prices[item]
        total_cost = item_price * int(quantity)

        # Display the order details
        result = (f"Order Details\n\n"
                  f"Customer Name: {name}\n"
                  f"Contact Email: {email}\n"
                  f"Item: {item}\n"
                  f"Quantity: {quantity}\n"
                  f"Total Cost: ${total_cost}")

        messagebox.showinfo("Order Confirmation", result)

def main():
    root = tk.Tk()
    app = OrderForm(root)
    root.mainloop()

if __name__ == "__main__":
    main()






30b}}}



import math

# Base class for Shape
class Shape:
    def area(self):
        raise NotImplementedError("Subclasses must implement this method")

    def perimeter(self):
        raise NotImplementedError("Subclasses must implement this method")

# Subclass for Circle
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * (self.radius ** 2)

    def perimeter(self):
        return 2 * math.pi * self.radius

# Subclass for Square
class Square(Shape):
    def __init__(self, side_length):
        self.side_length = side_length

    def area(self):
        return self.side_length ** 2

    def perimeter(self):
        return 4 * self.side_length

# Subclass for Triangle
class Triangle(Shape):
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def area(self):
        s = self.perimeter() / 2  # Semi-perimeter
        return math.sqrt(s * (s - self.a) * (s - self.b) * (s - self.c))

    def perimeter(self):
        return self.a + self.b + self.c

def main():
    # Create instances of each shape
    circle = Circle(radius=5)
    square = Square(side_length=4)
    triangle = Triangle(a=3, b=4, c=5)

    # Print area and perimeter for each shape
    print(f"Circle: Radius = {circle.radius}")
    print(f"Area: {circle.area():.2f}")
    print(f"Perimeter: {circle.perimeter():.2f}")
    print()

    print(f"Square: Side Length = {square.side_length}")
    print(f"Area: {square.area():.2f}")
    print(f"Perimeter: {square.perimeter():.2f}")
    print()

    print(f"Triangle: Sides = {triangle.a}, {triangle.b}, {triangle.c}")
    print(f"Area: {triangle.area():.2f}")
    print(f"Perimeter: {triangle.perimeter():.2f}")

if __name__ == "__main__":
    main()

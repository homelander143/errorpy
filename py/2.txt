2A}}
def bitwise_operations(a, b):
    print("Bitwise Operations:")
    print(f"1. AND (a & b): {bin(a & b)}")
    print(f"2. OR (a | b): {bin(a | b)}")
    print(f"3. XOR (a ^ b): {bin(a ^ b)}")

def arithmetic_operations(a, b):
    print("Arithmetic Operations:")
    print(f"1. Add (a + b): {a + b}")
    print(f"2. Subtract (a - b): {a - b}")
    print(f"3. Multiply (a * b): {a * b}")
    if b != 0:
        print(f"4. Divide (a / b): {a / b}")
    else:
        print("4. Divide: Division by zero is not allowed")

def main():
    # Get the user's choice for operation type
    choice = input("Enter 'B' for Bitwise operations or 'A' for Arithmetic operations: ").strip().upper()
    
    if choice not in ('B', 'A'):
        print("Invalid choice. Please enter 'B' or 'A'.")
        return

    # Read integers from the user
    try:
        a = int(input("Enter the first integer: "))
        b = int(input("Enter the second integer: "))
    except ValueError:
        print("Invalid input. Please enter valid integers.")
        return

    # Perform operations based on user's choice
    if choice == 'B':
        # Bitwise operations
        bitwise_operations(a, b)
    elif choice == 'A':
        # Arithmetic operations
        arithmetic_operations(a, b)

if __name__ == "__main__":
    main()




2B}}
def print_t_pattern(width, height):
    # Print the top horizontal line
    print('*' * width)
    
    # Print the vertical line
    for _ in range(height - 1):
        # Print leading spaces followed by a single '*'
        print(' ' * ((width - 1) // 2) + '*')

def main():
    width = 5  # Width of the horizontal line
    height = 7  # Height of the vertical line including the horizontal part

    print_t_pattern(width, height)

if __name__ == "__main__":
    main()






2C}}

def generate_fibonacci(n):
    # Initialize the first two Fibonacci numbers
    fibonacci_sequence = []
    a, b = 0, 1
    
    # Generate the Fibonacci sequence
    for _ in range(n):
        fibonacci_sequence.append(a)
        a, b = b, a + b  # Update the values for the next iteration
    
    return fibonacci_sequence

def main():
    try:
        n = int(input("Enter the number of terms in the Fibonacci series: "))
        if n <= 0:
            print("Please enter a positive integer.")
            return
        
        # Generate the Fibonacci series
        fibonacci_sequence = generate_fibonacci(n)
        
        # Print the Fibonacci series in a single line
        print(" ".join(map(str, fibonacci_sequence)))
    
    except ValueError:
        print("Invalid input. Please enter a valid integer.")

if __name__ == "__main__":
    main()

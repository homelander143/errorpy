15A}}

def reverse_words(s):
    """Reverse the words in the given string."""
    # Split the string into words
    words = s.split()
    
    # Reverse the order of the words
    reversed_words = words[::-1]
    
    # Join the reversed words into a single string
    reversed_string = ' '.join(reversed_words)
    
    return reversed_string

def main():
    # Read input string from the user
    input_string = input("Enter a string: ")
    
    # Reverse the words in the string
    result = reverse_words(input_string)
    
    # Display the result
    print("Reversed words string:", result)

if __name__ == "__main__":
    main()


15B}}

def is_divisible_by_5(binary_str):
    """Check if the binary number (given as a string) is divisible by 5."""
    # Convert binary string to a decimal number
    decimal_number = int(binary_str, 2)
    
    # Check if the decimal number is divisible by 5
    return decimal_number % 5 == 0

def main():
    # Read input sequence of binary numbers from the user
    input_sequence = input("Enter a sequence of comma-separated 4-digit binary numbers: ")
    
    # Split the input string into a list of binary numbers
    binary_numbers = input_sequence.split(',')
    
    # Filter the binary numbers that are divisible by 5
    divisible_by_5 = [binary_str for binary_str in binary_numbers if is_divisible_by_5(binary_str)]
    
    # Join the result list into a comma-separated string
    result = ','.join(divisible_by_5)
    
    # Print the result
    print("Binary numbers divisible by 5:", result)

if __name__ == "__main__":
    main()


15C}}

def pair_elements_with_rear(matrix):
    """Pair each element in a row with its corresponding rear element in the row."""
    paired_list = []
    
    for row in matrix:
        row_length = len(row)
        # Create pairs (element, corresponding rear element)
        pairs = [[row[i], row[row_length - 1]] for i in range(row_length - 1)]
        # Add pairs to the result list
        paired_list.append(pairs)
    
    return paired_list

def main():
    # Original matrix
    matrix = [[4, 5, 6], [2, 4, 5], [6, 7, 5]]
    
    # Get the paired list
    result = pair_elements_with_rear(matrix)
    
    # Print the result
    print("The list after pairing is:", result)

if __name__ == "__main__":
    main()

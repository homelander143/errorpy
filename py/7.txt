7A}}
def is_alpha(s):
    """
    Check if the string contains only alphabetic characters.
    
    Parameters:
    s (str): The string to check.
    
    Returns:
    bool: True if the string contains only alphabetic characters, False otherwise.
    """
    return s.isalpha()

def is_digit(s):
    """
    Check if the string contains only digits.
    
    Parameters:
    s (str): The string to check.
    
    Returns:
    bool: True if the string contains only digits, False otherwise.
    """
    return s.isdigit()

def count_consonants(s):
    """
    Count the number of consonants in the string.
    
    Parameters:
    s (str): The string to analyze.
    
    Returns:
    int: The number of consonants in the string.
    """
    consonants = "bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ"
    return sum(1 for char in s if char in consonants)

def main():
    # Read input from the user
    user_input = input("Enter a string: ").strip()
    
    if is_alpha(user_input):
        # Check if it starts with 'T'
        if user_input.startswith('T'):
            print("The string starts with the letter 'T'.")
        else:
            print("The string does not start with the letter 'T'.")
        
        # Count the total number of consonants
        num_consonants = count_consonants(user_input)
        print(f"Total number of consonants: {num_consonants}")
    
    elif is_digit(user_input):
        # Print the reversed digits
        reversed_digits = user_input[::-1]
        print(f"Reversed digits: {reversed_digits}")
    
    else:
        print("The input contains neither only alphabetic characters nor only digits.")

if __name__ == "__main__":
    main()





7B}}
def is_duck_number(number):
    """
    Check if the given number is a Duck Number.
    
    Parameters:
    number (str): The number to check (as a string).
    
    Returns:
    bool: True if the number is a Duck Number, False otherwise.
    """
    # Check if the number starts with '0'
    if number.startswith('0'):
        return False
    
    # Check if the number contains any '0' after the first character
    return '0' in number

def main():
    try:
        # Read the number from the user
        num = input("Enter a number: ").strip()
        
        # Check if the number is a Duck Number
        if num.isdigit() and int(num) > 0:  # Ensure the input is a positive integer
            if is_duck_number(num):
                print(f"{num} is a Duck Number.")
            else:
                print(f"{num} is not a Duck Number.")
        else:
            print("The input is not a valid positive integer.")
    
    except ValueError:
        print("Invalid input! Please enter a valid number.")

if __name__ == "__main__":
    main()


7C}}

def generate_pascals_triangle(n):
    """
    Generate Pascal's Triangle up to n rows.
    
    Parameters:
    n (int): The number of rows to generate.
    
    Returns:
    list of lists: The Pascal's Triangle.
    """
    triangle = []

    for i in range(n):
        # Start each row with 1
        row = [1] * (i + 1)
        
        # Calculate the values for each row (except the first and last values which are always 1)
        for j in range(1, i):
            row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]
        
        # Append the row to the triangle
        triangle.append(row)
    
    return triangle

def print_pascals_triangle(triangle):
    """
    Print Pascal's Triangle in a formatted manner.
    
    Parameters:
    triangle (list of lists): The Pascal's Triangle to print.
    """
    # Find the width of the last row for formatting
    max_width = len(' '.join(map(str, triangle[-1])))
    
    for row in triangle:
        # Join the row elements with space and center-align based on max_width
        print(' '.join(map(str, row)).center(max_width))

def main():
    try:
        # Number of rows for Pascal's Triangle
        num_rows = 5
        
        # Generate Pascal's Triangle
        pascals_triangle = generate_pascals_triangle(num_rows)
        
        # Print Pascal's Triangle
        print_pascals_triangle(pascals_triangle)
    
    except ValueError:
        print("Invalid input! Please enter a valid integer.")

if __name__ == "__main__":
    main()



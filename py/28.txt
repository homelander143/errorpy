28a}}

import tkinter as tk
from tkinter import messagebox

class RegistrationForm:
    def __init__(self, root):
        self.root = root
        self.root.title("Student Subject Registration")

        # Create and place labels and entry widgets for student information
        tk.Label(root, text="Student Name:").grid(row=0, column=0, padx=10, pady=10, sticky='e')
        self.name_entry = tk.Entry(root)
        self.name_entry.grid(row=0, column=1, padx=10, pady=10)

        tk.Label(root, text="Student ID:").grid(row=1, column=0, padx=10, pady=10, sticky='e')
        self.id_entry = tk.Entry(root)
        self.id_entry.grid(row=1, column=1, padx=10, pady=10)

        tk.Label(root, text="Select Subjects:").grid(row=2, column=0, padx=10, pady=10, sticky='e')

        # List of subjects
        self.subjects = ["Math", "Science", "English", "History", "Art"]
        self.subject_vars = []

        # Create checkbuttons for each subject
        for i, subject in enumerate(self.subjects):
            var = tk.BooleanVar()
            chk = tk.Checkbutton(root, text=subject, variable=var)
            chk.grid(row=3 + i // 2, column=1 + (i % 2), padx=10, pady=5, sticky='w')
            self.subject_vars.append(var)

        # Create and place the "Submit" button
        self.submit_button = tk.Button(root, text="Submit", command=self.submit_form)
        self.submit_button.grid(row=3 + len(self.subjects) // 2 + 1, column=0, columnspan=2, pady=20)

    def submit_form(self):
        name = self.name_entry.get()
        student_id = self.id_entry.get()
        selected_subjects = [subject for i, subject in enumerate(self.subjects) if self.subject_vars[i].get()]

        # Validate the inputs
        if not name or not student_id:
            messagebox.showerror("Input Error", "Please fill in all fields.")
            return

        if not selected_subjects:
            messagebox.showwarning("No Subjects Selected", "Please select at least one subject.")
            return

        # Display the registration details
        result = f"Registration Details\n\nName: {name}\nID: {student_id}\nSubjects: {', '.join(selected_subjects)}"
        messagebox.showinfo("Registration Successful", result)

def main():
    root = tk.Tk()
    app = RegistrationForm(root)
    root.mainloop()

if __name__ == "__main__":
    main()




28b}}}


class Actor:
    def __init__(self, actor_name, actor_age):
        self.actor_name = actor_name
        self.actor_age = actor_age

    def display(self):
        return f"Actor Name: {self.actor_name}\nActor Age: {self.actor_age}"

class Director:
    def __init__(self, director_name, director_age):
        self.director_name = director_name
        self.director_age = director_age

    def display(self):
        return f"Director Name: {self.director_name}\nDirector Age: {self.director_age}"

class Movie(Actor, Director):
    def __init__(self, movie_title, release_year, actor_name, actor_age, director_name, director_age):
        Actor.__init__(self, actor_name, actor_age)
        Director.__init__(self, director_name, director_age)
        self.movie_title = movie_title
        self.release_year = release_year

    def display(self):
        actor_details = Actor.display(self)
        director_details = Director.display(self)
        return (f"Movie Title: {self.movie_title}\nRelease Year: {self.release_year}\n"
                f"{actor_details}\n{director_details}")

def main():
    # Create a Movie object
    movie = Movie("Inception", 2010, "Leonardo DiCaprio", 45, "Christopher Nolan", 50)
    
    # Display the details of the movie
    print(movie.display())

if __name__ == "__main__":
    main()

https://github.com/Yamnur/python
https://github.com/rohan-m-k/python_programs/tree/main
https://github.com/vishwasHS/pythonlab.git
https://chatgpt.com/share/67772adf-b469-4a0f-aeea-ba43b5f456d0
https://chatgpt.com/share/a9a6cd50-5889-4271-ba15-9d45ee7c5ac8
https://github.com/Shravaniuppar/Python-pgms-sem-4.git


class employ:
    def __init__(self,a,b,c,d):
        self.eid=a
        self.ename=b
        self.__salary=c
        self.designation=d
    def display(self):
        print("employ id:",self.eid)
        print("employ name:",self.ename)
        print("salary:",self.__salary)
        print("designation:",self.designation)
    def count_same(self,d):
        c=0
        for e in emp:
            if e.designation==d:
                c=c+1
                return c
        return 0
    def delete(self):
        self.eid=None
        self.ename=None
        self.__salary=None
        self.designatio=None
        print("Record deleted successfully.")
    def update(self,id):
       self.eid=id
       print(f"employ id is updated successfully for {self.ename}")
def create_emp(n):    
     emp=[]
     for i in range(n):
           a,b,c,d=input("enter  employ id,name,salary and designation").split(" ")
           e=employ(a,b,float(c),d)
           emp.append(e)
     return emp
def search(self,k):
       for e in emp:
           if e.eid==k:
               return e
       return None     
n=int(input("Enter number of employs: "))
emp =create_emp(n)  
while True:
        print("\noptions:")
        print("1.Display employ details")
        print("2.count")
        print("3.update eid")
        print("4.delete employ details")
        print("5.Exit")
        choice = input("Enter your choice:")
        if choice=="1":
           id = input("Enter employ id to display details: ")
           e=search(emp,id)
           if e:
                e.display()
           else:
                print("employ not found.")
        elif choice=='2':
            d= input("Enter designation to count number of same designation:")
            print("total number of employ with same designation :",e.count_same(d))
                  
        elif choice == '3':
            id = input("Enter employ id to update: ")
            new_id = int(input("Enter new eid: "))
            e=search(emp,id)
            if e:
               e.update(new_id)
            else:
                print("employ not found.")
        elif choice == '4':
            id = input("Enter employ id to delete: ")
            e= search(emp,id)
            if e:
                e.delete()
            else:
                print("employ not found.") 
        elif choice == '5':
            print("Exiting program...")
            break
        
        else:
             print("Invalid choice. Please enter a valid option.")  

   #################OOPS########################
class person:
    def __init__(self,a,b):
        self.name=a
        self.address=b
    def display(self):
        print("name:",self.name)
        print("address:",self.address)
        
        
class student(person):
    def __init__(self,x,y,m,n):
        super().__init__(x,y)
        self.__usn=m
        self.__clgname=n
    def display(self):
        super().display()
        print("usn:",self.__usn)
        print("college name:",self.__clgname)
        
class emp(person):
    def __init__(self,p,q,x,y):
        super().__init__(p,q)
        self.__id=x
        self.__salary=y
    def display(self):
        super().display()
        print("employ id:",self.__id)
        print("salary:",self.__salary)
        
s=student("vinod","gadag","2ba22ai123","bec")
s.display()
e=emp("binod","vijayapur","cs231",1234.65) 
e.display()       
     
     #################OOPS########################  
 import datetime
class person:
    def __init__(self,x,y,z):
        self.name=x
        self.dob=y
        self.country=z
    def display(self):
        print("name is",self.name)
        print("country is",self.country)
        print("date of birth is",self.dob)
    def calculate_age(self):
        today=datetime.date.today()
        age=today.year-self.dob.year-((today.month,today.day)<(self.dob.month,self.dob.day))
        return age
p=person("vani",datetime.date(2003,9,17),"India")
age=p.calculate_age()
p.display()
print("age is",age)            
     #################GUI########################  
from tkinter import *
from datetime import datetime
def cal():
    # Get user input
    day = int(e1.get())
    month = int(e2.get())
    year = int(e3.get())
    birthdate = datetime(year, month, day)
    today = datetime.now()
    age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))
    l=Label(f,text="Age is:"+str(age),font=20)
    l.place(x=400,y=400)   
r=Tk()
r.geometry('900x900')
f=Frame(r,width=900,height=900,bg="black")
f.place(x=0,y=0)
l1=Label(f,text="calculating age of person",fg='red',font=30)
l1.place(x=300,y=10)
l=Label(f,text="Enter your date of birth :",font=20)
l.place(x=150,y=50)
l=Label(f,text="day:",font=20)
l.place(x=150,y=100)
l=Label(f,text="Month:",font=20)
l.place(x=150,y=150)
l=Label(f,text="Year:",font=20)
l.place(x=150,y=200)
e1=Entry(f,width=20)
e1.place(x=200,y=100)
e2=Entry(f,width=20)
e2.place(x=210,y=150)
e3=Entry(f,width=20)
e3.place(x=200,y=200)

b=Button(f,text="AGE",fg="black",font=50,command=cal)
b.place(x=300,y=300)
r.mainloop() 
      #################GUI########################  
from tkinter import *
def disp():
    k=e.get()
    t=Text(f)
    t.place(x=400,y=100)
    t.insert(END,'entered name is: '+k+"\n")
    k1=e1.get()
    t.insert(END,'entered usn is '+k1+"\n")
    
    if v.get()==1:
        t.insert(END,"student division is"+r['text']+"\n")
    
    if v.get()==2:
        t.insert(END,"student division is"+r1['text']+"\n")
    m=v1.get()
    t.insert(END,"semester is"+str(m)+"\n")
    
    n=l4.curselection()
    p=[]
    for j in n:
        p.append(l4.get(j))
    t.insert(END,"selected course are"+"\n")
    t.insert(END,p)
r=Tk()
r.geometry('900x900')
f=Frame(r,bg='skyblue',height=900,width=900)
f.place(x=0,y=0)
h=Label(f,text="student registration form",width=20,height=2,fg='purple',font=('bold',20))
h.place(x=300,y=10)
l=Label(f,text='enter the name',fg='red',font=20)
l.place(x=20,y=100)
l1=Label(f,text='enter usn',fg='red',font=20)
l1.place(x=20,y=150)
e=Entry(f,width=20)
e.place(x=200,y=100)
e1=Entry(f,width=20)
e1.place(x=200,y=150)
l2=Label(f,text='Division',fg='red',font=20)
l2.place(x=20,y=200)
v=IntVar()
r=Radiobutton(f,text='A',variable=v,value=1)
r.place(x=200,y=200)
r1=Radiobutton(f,text='B',variable=v,value=2)
r1.place(x=200,y=230)
l3=Label(f,text='Semester',fg='red',font=20)
l3.place(x=20,y=290)
v1=IntVar()
s=Spinbox(f,from_=1,to=8,textvariable=v1)
s.place(x=200,y=300)
c=Label(f,text='course',fg='red',font=20)
c.place(x=20,y=330)
l4=Listbox(f,activestyle='underline',selectmode=EXTENDED)
l4.place(x=20,y=390)
s=['python','c','java','c++']
for i in s:
    l4.insert(END,i)
b=Button(f,text='display',fg='red',command=disp)#command is eb=vent registration
b.place(x=300,y=500)

r.mainloop()
       
         #################GUI########################  
from tkinter import *

def disp(k):
   k.tkraise()
r=Tk()
r.geometry('900x900')
f=Frame(r,bg='skyblue',height=900,width=900)
f.place(x=0,y=0)
f1=Frame(r,bg='lightpink',height=900,width=900)
f1.place(x=0,y=0)
t=Text(f)
l=Label(f,text='Quality',fg='red',font=20)
l.place(x=200,y=100)
l=Label(f,text='size',fg='red',font=20)
l.place(x=200,y=150)
l1=Label(f1,text='Name',fg='blue',font=20)
l1.place(x=200,y=100)
l1=Label(f1,text='Address',fg='blue',font=20)
l1.place(x=200,y=150)
l1=Label(f1,text='phone no',fg='blue',font=20)
l1.place(x=200,y=200)
l1=Label(f1,text='Total amt to pay',fg='blue',font=20)
l1.place(x=200,y=250)
e=Entry(f1,width=20)
e.place(x=250,y=100)
e1=Entry(f1,width=20)
e1.place(x=270,y=150)
e=Entry(f1,width=20)
e.place(x=275,y=200)
e1=Entry(f1,width=20)
e1.place(x=320,y=250)
v1=IntVar()
s=Spinbox(f,value=('good','medium','poor'),textvariable=v1)
s.place(x=300,y=100)
v=IntVar()
s1=Spinbox(f,from_=1,to=100,textvariable=v)
s1.place(x=300,y=150)
b=Button(f,text="shipping info",fg="black",font=50,command=lambda:disp(f1))
b.place(x=200,y=200)
disp(f)
r.mainloop()     
#################GUI################
def click1():
    b1=Button(f,text="off",command=click2)
    b1.place(x=300,y=200)
    l=Label(f,text="Button is "+b1['text'],width=20,height=2,bg="blue",fg="white",font=('bold',20))
    l.place(x=300,y=100)

    
    
def click2():
    b=Button(f,text="on",command=click1)
    b.place(x=300,y=200)
    l=Label(f,text="Button is "+b['text'],width=20,height=2,bg="blue",fg="white",font=('bold',20))
    l.place(x=300,y=100)




from tkinter import *
r=Tk()
r.geometry('900x900')
f=Frame(r,width=900,height=900,bg="skyblue")
f.place(x=0,y=0)
l=Label(f,text="Press the button",width=20,height=2,bg="blue",fg="white",font=('bold',20))
l.place(x=300,y=100)
b=Button(f,text="on",command=click1)
b.place(x=300,y=200)
r.mainloop()
######################GUI####################
def click1():
    f1.tkraise()
    
def click2():
    f.tkraise()
    
from tkinter import *
r=Tk()
r.geometry('900x900')
f=Frame(r,width=900,height=900,bg="skyblue")
f.place(x=0,y=0)
f1=Frame(r,width=900,height=900,bg="violet")
f1.place(x=0,y=0)
l=Label(f,text="Frame 1",width=20,height=2,bg="blue",fg="white",font=('bold',20))
l.place(x=300,y=100)
b=Button(f,text="Sign in",command=click1)
b.place(x=300,y=200)


l1=Label(f1,text="Frame 2",width=20,height=2,bg="blue",fg="white",font=('bold',20))
l1.place(x=300,y=100)
b1=Button(f1,text="Sign up",command=click2)
b1.place(x=300,y=200)
r.mainloop()
######################GUI####################
def disp():
    k=e.get()
    t=Text(f)
    t.place(x=100,y=500)
    t.insert(END,"Name: "+k+"\n")
    if v.get()==1:
        t.insert(END,"Gender: "+m["text"]+"\n")
    if v.get()==2:
        t.insert(END,"Gender: "+fe["text"]+"\n")
    k1=v1.get()
    k2=v2.get()
    k3=v3.get()
    t.insert(END,"Date of birth: "+k1+"-"+k2+"-"+k3+"\n")
    k4=e1.get()
    t.insert(END,"Phone no: "+k4+"\n")
    k5=e2.get()
    t.insert(END,"Email: "+k5+"\n")
    k6=v4.get()
    t.insert(END,"Country: "+k6+"\n")
    if v5.get()==1:
        t.insert(END,"Category: "+g["text"]+"\n")
    if v5.get()==2:
        t.insert(END,"Category: "+sc["text"]+"\n")
    if v5.get()==3:
        t.insert(END,"Category: "+obc["text"]+"\n")
       
from tkinter import *
r=Tk()
r.geometry('900x900')
f=Frame(r,width=900,height=900,bg="pink")
f.place(x=0,y=0)
l=Label(f,text="Student College admission form",width=30,height=1,bg="Yellow",fg="black",font=('bold',20))
l.place(x=150,y=50)
l=Label(f,text="Enter student name",width=20,height=1,bg="white",fg="black")
l.place(x=30,y=150)
e=Entry(f,width=25,fg='black',bg='white',font=('Arial',14))
e.place(x=200,y=150)

v=IntVar()
l=Label(f,text="Enter Gender",width=20,height=1,bg="white",fg="black")
l.place(x=30,y=200)
m=Radiobutton(f,text="Male",variable=v,value=1)
m.place(x=200,y=200)
fe=Radiobutton(f,text="Female",variable=v,value=2)
fe.place(x=200,y=222)

l=Label(f,text="Enter Birth date",width=20,height=1,bg="white",fg="black")
l.place(x=30,y=260)
v1=StringVar()
v2=StringVar()
v3=StringVar()
s1=Spinbox(f,values=('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31'),textvariable=v1)
s1.place(x=200,y=260)
s2=Spinbox(f,values=('Jan','Feb','Mar','Apr','May','June','July','Aug','Sept','Oct','Nov','Dec'),textvariable=v2)
s2.place(x=350,y=260)
s3=Spinbox(f,values=('2000','2001','2002','2003','2004','2005','2006'),textvariable=v3)
s3.place(x=500,y=260)

l=Label(f,text="Enter Phone number",width=20,height=1,bg="white",fg="black")
l.place(x=30,y=290)
e1=Entry(f,width=25,fg='black',bg='white',font=('Arial',14))
e1.place(x=200,y=290)

l=Label(f,text="Enter Email",width=20,height=1,bg="white",fg="black")
l.place(x=30,y=320)
e2=Entry(f,width=25,fg='black',bg='white',font=('Arial',14))
e2.place(x=200,y=320)

l=Label(f,text="Enter Country",width=20,height=1,bg="white",fg="black")
l.place(x=30,y=350)
v4=StringVar()
s4=Spinbox(f,values=('India','Japan','America','China','Korea','France','Spain','Brazil','Italy','Vietnam','Thailand'),textvariable=v4)
s4.place(x=200,y=350)

v5=IntVar()
l=Label(f,text="Enter Category",width=20,height=1,bg="white",fg="black")
l.place(x=30,y=380)
g=Radiobutton(f,text="General",variable=v5,value=1)
g.place(x=200,y=380)
sc=Radiobutton(f,text="SC/ST",variable=v5,value=2)
sc.place(x=200,y=400)
obc=Radiobutton(f,text="OBC",variable=v5,value=3)
obc.place(x=200,y=420)

b=Button(f,text="Enter",command=disp)   
b.place(x=450,y=450)
r.mainloop()
#######################21.a######################
# Initial inventory
shop = {
    'chair': [10, 10000],
    'sofa-set': [5, 60000],
    'table': [7, 20000],
    'bed': [4, 40000]
}

def check_availability_and_update(shop):
    product = input("Enter the product name: ").lower()
    if product in shop:
        quantity, price = shop[product]
        print(f"{product.title()} - Quantity: {quantity}, Price: {price}")

        if quantity > 0:
            quantity_sold = int(input("Enter the quantity to purchase: "))
            if quantity_sold <= quantity:
                shop[product][0] -= quantity_sold
                income = quantity_sold * price
                print(f"Purchase successful! Income generated: {income}")
                print(f"Updated {product} - Quantity: {shop[product][0]}, Price: {price}")
            else:
                print(f"Insufficient stock. Only {quantity} available.")
        else:
            print(f"{product.title()} is out of stock.")
    else:
        print(f"{product.title()} is not available in the inventory.")

# Run the function
check_availability_and_update(shop)
#######################21.b######################
def compute_gcd(a, b):
    if b == 0:
        return a
    else:
        return compute_gcd(b, a % b)

# Example usage
num1 = 48
num2 = 18
print(f"The GCD of {num1} and {num2} is {compute_gcd(num1, num2)}")
#############################################
def replace_words(input_string, lookup_dict):
    words = input_string.split()
    replaced_words = []
    
    for word in words:
        if word in lookup_dict:
            replaced_words.append(lookup_dict[word])
        else:
            replaced_words.append(f"[{word}: replacement not possible]")
    
    return ' '.join(replaced_words)

# Read input from the user
input_string = input("Enter the string: ")

# Read the dictionary from the user
lookup_dict = {}
n = int(input("Enter the number of dictionary entries: "))

for _ in range(n):
    key = input("Enter the word to be replaced: ")
    value = input("Enter the replacement word: ")
    lookup_dict[key] = value

# Replace words in the input string using the lookup dictionary
result = replace_words(input_string, lookup_dict)
print("Resulting string:", result)
#####################22.b########################
def check_thabit(number):
    if number <= 0:
        return False
    
    n = 0
    while True:
        thabit_number = 3 * (2 ** n) - 1
        if thabit_number == number:
            return True
        elif thabit_number > number:
            return False
        n += 1

# Test the function with some examples
test_numbers = [5, 11, 23, 47, 95, 190]

for num in test_numbers:
    print(f"Is {num} a Thabit number? {'Yes' if check_thabit(num) else 'No'}")


#####################student grade card########################
import tkinter as tk
from tkinter import messagebox

class GradeCardGenerator:
    def _init_(self, root):
        self.root = root
        self.root.title("Student Grade Card Generator")
        
        # Student details
        self.name_label = tk.Label(root, text="Student Name:")
        self.name_label.grid(row=0, column=0, padx=10, pady=5)
        self.name_entry = tk.Entry(root)
        self.name_entry.grid(row=0, column=1, padx=10, pady=5)
        
        self.roll_label = tk.Label(root, text="Roll Number:")
        self.roll_label.grid(row=1, column=0, padx=10, pady=5)
        self.roll_entry = tk.Entry(root)
        self.roll_entry.grid(row=1, column=1, padx=10, pady=5)
        
        # Subject details
        self.subject1_label = tk.Label(root, text="Subject 1 Marks:")
        self.subject1_label.grid(row=2, column=0, padx=10, pady=5)
        self.subject1_entry = tk.Entry(root)
        self.subject1_entry.grid(row=2, column=1, padx=10, pady=5)
        
        self.subject2_label = tk.Label(root, text="Subject 2 Marks:")
        self.subject2_label.grid(row=3, column=0, padx=10, pady=5)
        self.subject2_entry = tk.Entry(root)
        self.subject2_entry.grid(row=3, column=1, padx=10, pady=5)
        
        self.subject3_label = tk.Label(root, text="Subject 3 Marks:")
        self.subject3_label.grid(row=4, column=0, padx=10, pady=5)
        self.subject3_entry = tk.Entry(root)
        self.subject3_entry.grid(row=4, column=1, padx=10, pady=5)
        
        # Generate button
        self.generate_button = tk.Button(root, text="Generate Grade Card", command=self.generate_grade_card)
        self.generate_button.grid(row=5, columnspan=2, pady=10)
    
    def generate_grade_card(self):
        try:
            name = self.name_entry.get()
            roll_number = self.roll_entry.get()
            subject1_marks = int(self.subject1_entry.get())
            subject2_marks = int(self.subject2_entry.get())
            subject3_marks = int(self.subject3_entry.get())
            
            total_marks = subject1_marks + subject2_marks + subject3_marks
            percentage = total_marks / 3
            
            grade = self.calculate_grade(percentage)
            
            grade_card = (
                f"Student Name: {name}\n"
                f"Roll Number: {roll_number}\n"
                f"Subject 1 Marks: {subject1_marks}\n"
                f"Subject 2 Marks: {subject2_marks}\n"
                f"Subject 3 Marks: {subject3_marks}\n"
                f"Total Marks: {total_marks}\n"
                f"Percentage: {percentage:.2f}%\n"
                f"Grade: {grade}"
            )
            
            messagebox.showinfo("Grade Card", grade_card)
        
        except ValueError:
            messagebox.showerror("Input Error", "Please enter valid marks for all subjects.")
    
    def calculate_grade(self, percentage):
        if percentage >= 90:
            return 'A'
        elif percentage >= 80:
            return 'B'
        elif percentage >= 70:
            return 'C'
        elif percentage >= 60:
            return 'D'
        else:
            return 'F'

# Main code to run the GUI
if _name_ == "_main_":
    root = tk.Tk()
    app = GradeCardGenerator(root)
    root.mainloop()

################calulator#############
from tkinter import *

# Function to perform addition
def add():
    try:
        n1 = float(e.get())
        n2 = float(e1.get())
        result = n1 + n2
        result_label.config(text=f"Result: {result}")
    except ValueError:
        result_label.config(text="Invalid input! Please enter numbers only.")
def sub():
    try:
        n1 = float(e.get())
        n2 = float(e1.get())
        result = n1 - n2
        result_label.config(text=f"Result: {result}")
    except ValueError:
        result_label.config(text="Invalid input! Please enter numbers only.")
def mul():
    try:
        n1 = float(e.get())
        n2 = float(e1.get())
        result = n1*n2
        result_label.config(text=f"Result: {result}")
    except ValueError:
        result_label.config(text="Invalid input! Please enter numbers only.")
def div():
    try:
        n1 = float(e.get())
        n2 = float(e1.get())
        result = n1//n2
        result_label.config(text=f"Result: {result}")
    except ValueError:
        result_label.config(text="Invalid input! Please enter numbers only.")

# Initialize the main window
r = Tk()
r.geometry('900x900')

# Create a frame and set its properties
f = Frame(r, height=2000, width=2000, bg='lightblue')
f.propagate(0)  # Prevent frame from resizing to its content
f.pack()

# Create a label and set its properties
l = Label(f, text="Simple Calculator", font=('Italic', 15), bg='red', fg='yellow')
l.place(x=400, y=10)  # Center the label with some padding

# Create input labels and entry fields
l1 = Label(f, text="Enter the first value      ", bg="yellow", fg="black")
l2 = Label(f, text="Enter the second value", bg="yellow", fg="black")
e = Entry(f, width=25)
e1 = Entry(f, width=25)
l1.place(x=250, y=100)
l2.place(x=250, y=150)
e.place(x=400, y=100)
e1.place(x=400, y=150)

# Button to trigger addition
add_button = Button(f, text="Add", command=add, bg='green', fg='white')
add_button.place(x=400, y=200)

sub_button = Button(f, text="sub", command=sub, bg='green', fg='white')
sub_button.place(x=500, y=200)

mul_button = Button(f, text="mul", command=mul, bg='green', fg='white')
mul_button.place(x=600, y=200)

div_button = Button(f, text="div", command=div, bg='green', fg='white')
div_button.place(x=700, y=200)

# Label to display result
result_label = Label(f, text="", bg="skyblue", fg="black",font=('italic',15))
result_label.place(x=400, y=250)

# Start the Tkinter event loop
r.mainloop()

#######################student report#############
from tkinter import *

def generate_report():
    name = e1.get()
    usn = e2.get()
    sem = v_sem.get()
    
    # Fetching the marks for each subject
    
    marks = []
    for spinbox in mark_spinboxes:
        marks.append((spinbox.get()))
    
    # Create a new window for the report
    report_window = Toplevel(r)
    report_window.geometry('600x400')
    report_window.title("Student Grade Report")
    
    # Display the report in the new window
    report_frame = Frame(report_window, width=600, height=400, bg="lightgrey")
    report_frame.pack()

    Label(report_frame, text="Student Grade Report", bg='lightgrey', fg='black', font=('Arial', 16)).pack(pady=10)

    report_text = Text(report_frame, height=15, width=70, bg='white', fg='black')
    report_text.pack(pady=10)

    # Insert the new information
    report_text.insert(END, f"Student Name: {name}\n")
    report_text.insert(END, f"USN: {usn}\n")
    report_text.insert(END, f"Semester: {sem}\n")
    report_text.insert(END, "Marks:\n")
    for i, mark in enumerate(marks):
        report_text.insert(END, f"  Subject {i+1}: {mark}\n")

r = Tk()
r.geometry('800x600')
r.title("Student Grade Card Generator")

f = Frame(r, width=800, height=600, bg="lightblue")
f.pack()

# Form 1: Entry Form
Label(f, text="Enter Student Details", bg='lightblue', fg='black', font=('Arial', 16)).place(x=300, y=5)

# Student Name
Label(f, text="Student Name", bg='lightblue', fg='black', font=('Arial', 12)).place(x=50, y=50)
e1 = Entry(f, width=30)
e1.place(x=200, y=50)

# USN
Label(f, text="USN", bg='lightblue', fg='black', font=('Arial', 12)).place(x=50, y=100)
e2 = Entry(f, width=30)
e2.place(x=200, y=100)

# Semester
Label(f, text="Semester", bg='lightblue', fg='black', font=('Arial', 12)).place(x=50, y=150)
v_sem = StringVar()
s_sem = Spinbox(f, from_=1, to=8, textvariable=v_sem, width=5)
s_sem.place(x=200, y=150)

# Marks Entry
Label(f, text="Enter Marks", bg='lightblue', fg='black', font=('Arial', 12)).place(x=50, y=200)

mark_spinboxes = []
for i in range(5):  # Assuming 5 subjects
    Label(f, text=f"Subject {i+1}", bg='lightblue', fg='black', font=('Arial', 12)).place(x=50, y=240 + i*30)
    v = StringVar()
    s = Spinbox(f, from_=0, to=100, textvariable=v, width=5)
    s.place(x=200, y=240 + i*30)
    mark_spinboxes.append(s)

# Button to generate report
Button(f, text='Generate Report', bg='green', fg='white', font=('Arial', 12), command=generate_report).place(x=200, y=400)

r.mainloop()

#####################employee##############
from tkinter import *
def dis():
    name = e1.get()
    qualifications = []
    if v1.get() == 1:
        qualifications.append("Graduate")
    if v2.get() == 1:
        qualifications.append("Post Graduate")
    if v3.get() == 1:
        qualifications.append("PhD")
    qualification_str = ", ".join(qualifications) if qualifications else "Not Specified"
    gender = "Male" if v4.get() == 1 else "Female" if v4.get() == 2 else "Not Specified"
    designation = v5.get()

    # Clear the Text widget before inserting new information
    text_widget.delete(1.0, END)

    # Insert the new information
    text_widget.insert(END, f"Employee Name: {name}\n")
    text_widget.insert(END, f"Qualifications: {qualification_str}\n")
    text_widget.insert(END, f"Gender: {gender}\n")
    text_widget.insert(END, f"Designation: {designation}\n")

r = Tk()
r.geometry('800x600')
r.title("Employee Details Form")

f = Frame(r, width=800, height=600, bg="lightblue")
f.place(x=0,y=0)

l = Label(f, text="Employee Details Form", bg='yellow', fg='black', height=2, width=30, font=('Arial', 14, 'bold'))
l.place(x=250, y=20)

l1 = Label(f, text="Enter employee name:", bg='violet', fg='brown', height=1, width=20, font=('Arial', 10))
l1.place(x=50, y=100)

e1 = Entry(f, width=25, font=('Arial', 10))
e1.place(x=250, y=100)

l3 = Label(f, text="Select your qualification:", height=1, width=20, bg='violet', fg='black', font=('Arial', 10))
l3.place(x=50, y=150)
v1 = IntVar()
v2 = IntVar()
v3 = IntVar()
c1 = Checkbutton(f, text='Graduation', variable=v1, fg='red', bg='lightblue', font=('Arial', 10))
c2 = Checkbutton(f, text='Post Graduation', variable=v2, fg='red', bg='lightblue', font=('Arial', 10))
c3 = Checkbutton(f, text='PhD', variable=v3, fg='red', bg='lightblue', font=('Arial', 10))
c1.place(x=250, y=150)
c2.place(x=250, y=180)
c3.place(x=250, y=210)

l4 = Label(f, text="Enter your gender:", bg='green', fg='black', font=('Arial', 10))
l4.place(x=50, y=250)
v4 = IntVar()
r1 = Radiobutton(f, bg="lightblue", fg="red", font=('Arial', 10), variable=v4, value=1, text='Male')
r2 = Radiobutton(f, bg="lightblue", fg="red", font=('Arial', 10), variable=v4, value=2, text='Female')
r1.place(x=250, y=250)
r2.place(x=250, y=280)

l5 = Label(f, text="Select your designation:", bg='green', fg='black', font=('Arial', 10))
l5.place(x=50, y=330)

v5 = StringVar()
s2 = Spinbox(f, values=('Manager', 'Tester', 'Developer', 'Intern'), textvariable=v5, bg='lightblue', fg='red', font=('Arial', 10))
s2.place(x=250, y=330)

# Text widget to display the result
text_widget = Text(f, height=10, width=50, bg='lightgrey', fg='black', font=('Arial', 10))
text_widget.place(x=50, y=380)

b = Button(f, text='Submit', bg='green', fg='white', font=('Arial', 12), command=dis)
b.place(x=350, y=550)

r.mainloop()
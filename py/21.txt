21A}}

def display_product_info(shop, product_name):
    """
    Display the quantity and price of the given product.
    """
    if product_name in shop:
        quantity, price = shop[product_name]
        print(f"Product: {product_name}")
        print(f"Quantity: {quantity}")
        print(f"Price: {price}")
    else:
        print(f"Product '{product_name}' is not available in the inventory.")

def update_inventory(shop, product_name, purchase_quantity):
    """
    Update the inventory after a purchase and calculate income.
    """
    if product_name in shop:
        quantity, price = shop[product_name]
        
        if purchase_quantity <= quantity:
            total_income = purchase_quantity * price
            new_quantity = quantity - purchase_quantity
            shop[product_name][0] = new_quantity
            return total_income
        else:
            print(f"Not enough quantity available for '{product_name}'.")
            return 0
    else:
        print(f"Product '{product_name}' is not available in the inventory.")
        return 0

def main():
    # Initial inventory dictionary
    shop = {
        'chair': [10, 10000],
        'sofa-set': [5, 60000],
        'table': [15, 15000]
    }
    
    total_income = 0

    while True:
        # User input for product name
        product_name = input("Enter the product name (or 'exit' to quit): ").lower()

        if product_name == 'exit':
            break
        
        display_product_info(shop, product_name)
        
        # Check if the product exists in the inventory
        if product_name in shop:
            # User input for purchase quantity
            try:
                purchase_quantity = int(input(f"Enter the quantity to purchase for '{product_name}': "))
                income = update_inventory(shop, product_name, purchase_quantity)
                total_income += income
                
                if income > 0:
                    print(f"Purchase successful! Income from this sale: {income}")
                else:
                    print("Purchase failed due to insufficient quantity.")
            except ValueError:
                print("Invalid quantity. Please enter a number.")
        
        print(f"Current total income: {total_income}")
        print("Updated Inventory:", shop)
        
    print(f"Final total income: {total_income}")

if __name__ == "__main__":
    main()





21B}}


def compute_gcd(a, b):
    """
    Compute the GCD of two numbers using the Euclidean algorithm recursively.
    """
    # Base case: if b is 0, return a
    if b == 0:
        return a
    # Recursive case: compute gcd of b and a % b
    return compute_gcd(b, a % b)

def main():
    # Input two numbers from the user
    try:
        a = int(input("Enter the first number: "))
        b = int(input("Enter the second number: "))
        
        # Compute GCD
        gcd = compute_gcd(a, b)
        
        # Output the result
        print(f"The GCD of {a} and {b} is: {gcd}")
    except ValueError:
        print("Please enter valid integers.")

if __name__ == "__main__":
    main()





21c}}

import re

def is_strong_password(password):
    """
    Validate if the entered password is strong based on various criteria.
    """
    # Check password length
    if len(password) < 8:
        return False, "Password must be at least 8 characters long."
    
    # Check for at least one uppercase letter
    if not re.search(r'[A-Z]', password):
        return False, "Password must contain at least one uppercase letter."
    
    # Check for at least one lowercase letter
    if not re.search(r'[a-z]', password):
        return False, "Password must contain at least one lowercase letter."
    
    # Check for at least one digit
    if not re.search(r'[0-9]', password):
        return False, "Password must contain at least one digit."
    
    # Check for at least one special character
    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        return False, "Password must contain at least one special character."
    
    # If all conditions are met
    return True, "Password is strong."

def main():
    # Input password from the user
    password = input("Enter a password to check: ")
    
    # Validate the password
    is_strong, message = is_strong_password(password)
    
    # Print the result
    print(message)

if __name__ == "__main__":
    main()
